from django.core.management.base import BaseCommand
from django.db.models import Sum
from django.conf import settings
from datetime import datetime, date
from api.models import User, Product, Payment, Deal
import requests

from api.utils import (
    create_payments,
    create_deals,
    send_telegram_message
)

BRANCHES = settings.BRANCHES_ID

def error_handler(message):
    today = date.today()

    users = User.objects.filter(created_at__date=today).count()
    payments = Payment.objects.filter(created_at__date=today).count()
    deals = Deal.objects.filter(created_at__date=today).count()
    products = Product.objects.filter(created_at__date=today).count()

    main = f'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç üìä\n\n' \
        + f'üìÖ –î–∞—Ç–∞: {today}\n' \
        + f'–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users} —à—Ç\n' \
        + f'–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {payments} —à—Ç\n' \
        + f'–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {deals} —à—Ç\n' \
        + f'–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {products} —à—Ç\n\n' \
        + f'–°—Ç–∞—Ç—É—Å:\n{message} ‚ùå'

    send_telegram_message(main)

def success_handler(status):
    today = date.today()

    users = User.objects.filter(created_at__date=today)
    payments = Payment.objects.filter(created_at__date=today)
    deals = Deal.objects.filter(created_at__date=today)
    products = Product.objects.filter(created_at__date=today)

    message = f'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç üìä\n\n' \
        + f'üìÖ  –î–∞—Ç–∞: {today}\n' \
        + f'–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users.count()} —à—Ç\n' \
        + f'–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {payments.count()} —à—Ç\n' \
        + f'–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {deals.count()} —à—Ç\n' \
        + f'–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {products.count()} —à—Ç\n\n' \
        + f'–°—Ç–∞—Ç—É—Å:\n{status} ‚úÖ'

    send_telegram_message(message)

    uzs_payments = payments.filter(payment_type__currency__name='Base SUM').aggregate(total_amount=Sum('amount'))['total_amount']
    if not uzs_payments:
        uzs_payments = 0
    uzs_payments = round(uzs_payments, 2)

    usd_payments = payments.filter(payment_type__currency__name='USD').aggregate(total_amount=Sum('amount'))['total_amount']
    if not usd_payments:
        usd_payments = 0
    usd_payments = round(usd_payments, 2)

    uzs_deals = deals.filter(payment_type__currency__name='Base SUM').aggregate(total_amount=Sum('total'))['total_amount']
    if not uzs_deals:
        uzs_deals = 0
    uzs_deals = round(uzs_deals, 2)

    usd_deals = deals.filter(payment_type__currency__name='USD').aggregate(total_amount=Sum('total'))['total_amount']
    if not usd_deals:
        usd_deals = 0
    usd_deals = round(usd_deals, 2)

    message = f'–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç üìä\n\n' \
        + f'üìÖ  –î–∞—Ç–∞: {today}\n\n' \
        + f'–í–∞–ª—é—Ç–∞: USD\n' \
        + f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {usd_payments}\n' \
        + f'–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫: {usd_deals}\n\n' \
        + f'–í–∞–ª—é—Ç–∞: UZS\n' \
        + f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {uzs_payments}\n' \
        + f'–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫: {uzs_deals}\n\n' \
        + f'–°—Ç–∞—Ç—É—Å:\n{status} ‚úÖ'
    send_telegram_message(message)

class Command(BaseCommand):
    help = 'Send message to customers who has payment for today'

    def handle(self, *args, **options):
        date = datetime.now().strftime('%d.%m.%Y')

        for branch in BRANCHES:

            if not create_payments(branch, date):
                error_handler("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
                return

            if not create_deals(branch, date):
                error_handler("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–æ–∫")
                return

        success_handler('–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')